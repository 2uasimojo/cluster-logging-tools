#!/bin/bash

# This script allocates all unassigned primary shards to a given node using
# the openshift binary.  The binary must be in the path and the user executing the script
# must have access to logging project.  The inputs are:
#   pod   An Elasticsearch pod name
#   node  (Optional) An node Elasticsearch cluster which should be any one of the DC's.
source env-prep

pod=$1
node=${2:-}
if [ -z "${node}" ] ; then
  node=$(oc -n $LOGGING_NS get dc -l component=es -o jsonpath={.items[0].metadata.name})
fi

read -r -d '' SCRIPT << "EOF"
IFS=$'\n' unassigned=$(es_util --query=_cat/shards?h=index,shard,prirep,state,unassigned.reason | grep UNASSIGNED | grep NODE_LEFT)
regex="([-\.a-z0-9]*)\s+([0-9]+)\s+([r|p])"
payload=''
for line in $(echo "$unassigned"); do
  if [[ ${line} =~ ${regex} ]]; then
    index=${BASH_REMATCH[1]}
    shard=${BASH_REMATCH[2]}
    type=${BASH_REMATCH[3]}
    if [ -n "${payload}" ] ; then
      payload="${payload},"
    fi
    payload="${payload}{\"allocate_replica\":{\"index\":\"$index\",\"shard\":$shard,\"node\":\"$node\"}}"
  fi
done
payload="{\"commands\":[$payload]}"
file=$(mktemp)
echo $payload > $file
es_util --query=_cluster/reroute?pretty -XPOST -d @$file
EOF

#  m = pattern.match(line)
#  index = m.group(1).strip()
#  shard = m.group(2)
#  type = m.group(3)
#  if type == 'r':
#    if payload:
#      payload = payload + ','
#    payload = payload + '{"cancel":{"index":"%s","shard":%s,"node":"%s","allow_primary":"true"}}' % (index, shard, node)
#payload = payload + ''.format(index, shard, node)
#es_util --query=_cluster/reroute?pretty -XPOST -d ${payload}
oc exec -t -c elasticsearch $pod -- bash -c "node=${node} ${SCRIPT}"
