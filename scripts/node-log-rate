#!/bin/bash

set -euo pipefail

source env-prep

DEBUG=${DEBUG:-false}
ns=${LOGGING_NS:-openshift-logging}
FLUENTD_DS=${FLUENTD_DS:-ds/fluentd}
INTERVAL=${INTERVAL:-30}
if ! oc -n $ns get $FLUENTD_DS > /dev/null 2>&1 ; then
    FLUENTD_DS=ds/logging-fluentd
fi

if [ "${DEBUG:-false}" = true ] ; then
    set -x
fi

podline() {
    printf "%11.11s %7.7s %10.10s %7.7s %10.10s %7.7s %-21s %-8s %s\n" "$@"
}

podheader() {
    podline TOTAL TOTAL JOURNAL JOURNAL FILE FILE "" "" ""
    podline BYTES RECS BYTES RECS BYTES RECS POD NODETYPE NODE
}

totline() {
    printf "%25.25s %9.9s %9.9s %9.9s %9.9s %9.9s %9.9s\n" "$@"
}

totheader() {
    totline ""          "TOTAL"     "TOTAL"    "JOURNAL"   "JOURNAL"  "FILE"      "FILE"
    totline "TIMESTAMP" "BYTES/SEC" "RECS/SEC" "BYTES/SEC" "RECS/SEC" "BYTES/SEC" "RECS/SEC"
}

nodetype() {
    local node=$1
    local nodetype=$( oc get node $node -o jsonpath='{.metadata.labels.type}' ) || :
    if [ -z "$nodetype" ] ; then
	nodetype=$( oc get node $node -o yaml | awk -F'[/:]' '/node-role.kubernetes.io/ {print $2}' ) || :
    fi
    echo ${nodetype:-unknown}
}

gather_node_stats() {
    fpods=$( oc -n $ns get pod -l component=fluentd -o jsonpath='{.items[*].metadata.name}' )
    for pod in $fpods ; do
	oc -n $ns exec $pod -- bash -c 'journalctl -m -a -o export -S "'$INTERVAL' seconds ago" | awk "/^\$/ {recs += 1}; {bytes += length(\$0)}; END {print recs,bytes}"' > $workdir/$pod.journal.out 2> $workdir/$pod.journal.err &
	oc -n $ns exec $pod -- bash -c 'cat /var/log/containers/*.log | wc' > $workdir/$pod.file.out 2> $workdir/$pod.file.err &
    done
    wait

    if [ "${PER_POD:-false}" = true ] ; then
	podheader
    fi
    totjrecs=0; totjbytes=0; totfrecs=0; totfbytes=0; totrecs=0; totbytes=0
    for pod in $fpods ; do
	if ! node=$(oc get pod -n $ns $pod -o jsonpath='{.spec.nodeName}') || test -z "$node" ; then
            #echo Warning: could not get node for $pod
            node=unknown-$pod
            nodetype=unknown
	else
            nodetype=$( nodetype $node )
	fi

	jrecs=err; jbytes=err; frecs=err; fbytes=err
	if [ -s $workdir/$pod.journal.out ] ; then
            read jrecs jbytes < $workdir/$pod.journal.out
	    totjrecs=$(( totjrecs + jrecs ))
	    totjbytes=$(( totjbytes + jbytes ))
	    totrecs=$(( totrecs + jrecs ))
	    totbytes=$(( totbytes + jbytes ))
	    bothbytes=$jbytes
	    bothrecs=$jrecs
	fi
	if [ -s $workdir/$pod.file.out ] ; then
            read frecs fwords fbytes < $workdir/$pod.file.out
	    totfrecs=$(( totfrecs + frecs ))
	    totfbytes=$(( totfbytes + fbytes ))
	    totrecs=$(( totrecs + frecs ))
	    totbytes=$(( totbytes + fbytes ))
	    bothbytes=$( expr ${bothbytes:-0} + $fbytes )
	    bothrecs=$( expr ${bothrecs:-0} + $frecs )
	fi
	totpods=$(( totpods + 1 ))
	if [ "$jrecs" = err ] ; then
	    unavailpods=$(( unavailpods + 1 ))
	fi
	if [ "${PER_POD:-false}" = true ] ; then
	    podline ${bothbytes:-err} ${bothrecs:-err} $jbytes $jrecs $fbytes $frecs $pod $nodetype $node
	fi
    done
}

workdir=$( mktemp -d )
trap "rm -rf ${workdir:-/var/tmp/nosuchdir}" EXIT

lastfrecs=0; lastfbytes=0; totrecs=0; totbytes=0

totpods=0; unavailpods=0

gather_node_stats
echo ""
lastfbytes=$totfbytes
lastfrecs=$totfrecs
sleep $INTERVAL
while true ; do
    totpods=0; unavailpods=0
    gather_node_stats
    fbytes=$(( totfbytes - lastfbytes ))
    frecs=$(( totfrecs - lastfrecs ))
    lastfbytes=$totfbytes
    lastfrecs=$totfrecs
    totbyterate=$(( (totjbytes + fbytes) / INTERVAL ))
    totrecrate=$(( (totjrecs + frecs) / INTERVAL ))
    jbyterate=$(( totjbytes / INTERVAL ))
    jrecrate=$(( totjrecs / INTERVAL ))
    fbyterate=$(( fbytes / INTERVAL ))
    frecrate=$(( frecs / INTERVAL ))
    echo ""
    echo total pods: $totpods  unavailable pods: $unavailpods
    totheader
    totline $(date -Isec) $totbyterate $totrecrate $jbyterate $jrecrate $fbyterate $frecrate
    sleep $INTERVAL
done
